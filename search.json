[
  {
    "objectID": "prerequisites.html",
    "href": "prerequisites.html",
    "title": "Prerequisites",
    "section": "",
    "text": "There are Windows PCs at the venue and you are not required to bring your own machine. Participants from outside of York will be provided with a temporary IT account. However, if you prefer to work on your own machine please follow the instructions below.\n\n\nLaptops should have the following installed prior to attending and attempting the materials.\n\nR version 4.4.1 or higher:https://cloud.r-project.org/\nRStudio Version: 2024.12.1+563 or higher: https://posit.co/download/rstudio-desktop/\nThese R packages from CRAN: {tidyverse} Once you have installed R and RStudio, start RStudio up and go to the Packages tab in the bottom right pane; click Install and type the name of the package you want to install in the box that appears. Then wait until you get the cursor (&gt;) back in the console window."
  },
  {
    "objectID": "prerequisites.html#computing-requirements",
    "href": "prerequisites.html#computing-requirements",
    "title": "Prerequisites",
    "section": "",
    "text": "Laptops should have the following installed prior to attending and attempting the materials.\n\nR version 4.4.1 or higher:https://cloud.r-project.org/\nRStudio Version: 2024.12.1+563 or higher: https://posit.co/download/rstudio-desktop/\nThese R packages from CRAN: {tidyverse} Once you have installed R and RStudio, start RStudio up and go to the Packages tab in the bottom right pane; click Install and type the name of the package you want to install in the box that appears. Then wait until you get the cursor (&gt;) back in the console window."
  },
  {
    "objectID": "materials/principles-of-reproducibility.html",
    "href": "materials/principles-of-reproducibility.html",
    "title": "Introduction and Principles of reproducibility",
    "section": "",
    "text": "Chosen topics are: foundational, widely applicable, and transferable conceptually.\nIt is\n\n✅ An introduction to R for those without previous experience\n✅ About using RStudio Projects and good practice for code and project documentation and organisation\n✅ An introduction to the tidyverse\n\nIt is not\n\n❌ An introduction to statistics\n❌ Magic\n\nAfter this workshop the successful learner will be able to:\n\nExplain the rationale for scripting analysis\nFind their way around the RStudio windows\nCreate and plot data using ggplot\nKnow how to load packages\nUnderstand what is meant by the working directory, absolute and relative paths and be able to apply these concepts to data import\nSummarise data in a single group or in multiple groups\nDevelop highly organised analyses including well-commented scripts that can be understood by future you and others"
  },
  {
    "objectID": "materials/principles-of-reproducibility.html#programme-overview",
    "href": "materials/principles-of-reproducibility.html#programme-overview",
    "title": "Introduction and Principles of reproducibility",
    "section": "",
    "text": "Chosen topics are: foundational, widely applicable, and transferable conceptually.\nIt is\n\n✅ An introduction to R for those without previous experience\n✅ About using RStudio Projects and good practice for code and project documentation and organisation\n✅ An introduction to the tidyverse\n\nIt is not\n\n❌ An introduction to statistics\n❌ Magic\n\nAfter this workshop the successful learner will be able to:\n\nExplain the rationale for scripting analysis\nFind their way around the RStudio windows\nCreate and plot data using ggplot\nKnow how to load packages\nUnderstand what is meant by the working directory, absolute and relative paths and be able to apply these concepts to data import\nSummarise data in a single group or in multiple groups\nDevelop highly organised analyses including well-commented scripts that can be understood by future you and others"
  },
  {
    "objectID": "materials/principles-of-reproducibility.html#what-is-reproducibility",
    "href": "materials/principles-of-reproducibility.html#what-is-reproducibility",
    "title": "Introduction and Principles of reproducibility",
    "section": "What is reproducibility?",
    "text": "What is reproducibility?\n\n\nThe Turing Way’s definitions of reproducible research\n\nReproducible: Same data + same analysis = identical results\n“…obtaining consistent results using the same input data; computational steps, methods, and code; and conditions of analysis. This definition is synonymous with”computational reproducibility” (National Academies of Sciences et al. 2019). This is what we are concentrating on in the Supporting Information.\n\nReplicable: Different data + same analysis = qualitatively similar results. The work is not dependent on the specificities of the data.\nRobust: Same data + different analysis = qualitatively similar or identical results. The work is not dependent on the specificities of the analysis.\nGeneralisable: Different data + different analysis = qualitatively similar results and same conclusions."
  },
  {
    "objectID": "materials/principles-of-reproducibility.html#why-does-reproducibility-matter",
    "href": "materials/principles-of-reproducibility.html#why-does-reproducibility-matter",
    "title": "Introduction and Principles of reproducibility",
    "section": "Why does reproducibility matter?",
    "text": "Why does reproducibility matter?\n\nMany high profile cases of work which did not reproduce e.g. Anil Potti unravelled by Baggerly and Coombes (2009)\nFive selfish reasons to work reproducibly (Markowetz 2015). Alternatively, see the very entertaining talk\nWill become standard in Science and publishing e.g OECD Global Science Forum Building digital workforce capacity and skills for data-intensive science (OECD Global Science Forum 2020)"
  },
  {
    "objectID": "materials/principles-of-reproducibility.html#how-to-achieve-reproducibility",
    "href": "materials/principles-of-reproducibility.html#how-to-achieve-reproducibility",
    "title": "Introduction and Principles of reproducibility",
    "section": "How to achieve reproducibility",
    "text": "How to achieve reproducibility\n\nReproducibility is a continuum. Some is better than none!\nScript everything\nOrganisation: Project-oriented workflows with file and folder structure, naming things\nCode: follow a consistent style, organise into sections and scripts (be modular), Code algorithmically\nDocumentation: Readme files, code comments, metadata,\nMore advanced: version, control, continuous integration and testing"
  },
  {
    "objectID": "materials/principles-of-reproducibility.html#rationale-for-scripting",
    "href": "materials/principles-of-reproducibility.html#rationale-for-scripting",
    "title": "Introduction and Principles of reproducibility",
    "section": "Rationale for scripting",
    "text": "Rationale for scripting\n\nScience is the generation of ideas, designing work to test them and reporting the results.\nWe ensure laboratory and field work is replicable, robust and generalisable by planning and recording in lab books and using standard protocols. Repeating results is still hard.\nWorkflows for computational projects, and the data analysis and reporting of other work can, and should, be 100% reproducible!\nScripting is the way to achieve this."
  },
  {
    "objectID": "materials/principles-of-reproducibility.html#project-oriented-workflow",
    "href": "materials/principles-of-reproducibility.html#project-oriented-workflow",
    "title": "Introduction and Principles of reproducibility",
    "section": "Project-oriented workflow",
    "text": "Project-oriented workflow\n\nuse folders to organise your work\nyou are aiming for structured, systematic and repeatable.\ninputs and outputs should be clearly identifiable from structure and/or naming"
  },
  {
    "objectID": "materials/principles-of-reproducibility.html#further-reading",
    "href": "materials/principles-of-reproducibility.html#further-reading",
    "title": "Introduction and Principles of reproducibility",
    "section": "Further reading",
    "text": "Further reading\n\nData Organization in Spreadsheets (Broman and Woo 2018)\n\nTen simple rules for reproducible computational research (Sandve et al. 2013)\n\nBest practices for scientific computing (Wilson et al. 2014)\n\nGood enough practices in scientific computing (Wilson et al. 2017)\n\nExcuse Me, Do You Have a Moment to Talk About Version Control? (Bryan 2018)\n\n\nPages made with R (R Core Team 2025), Quarto (Allaire et al. 2024), knitr (Xie 2024, 2015, 2014), kableExtra (Zhu 2024)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "White Rose Analytics 1",
    "section": "",
    "text": "Training for first year PhD students on the White Rose Universities (York, Sheffield, Leeds) DTP in Mechanistic Biology. It is designed and delivered by Emma Rand of The University of York.\n\n\nAn increase in the complexity, and scale, of biological data means biologists are increasingly required to develop the data skills needed to design reproducible workflows for the simulation, collection, organisation, processing, analysis and presentation of data. Developing such data skills requires at least some coding, also known as scripting. This makes your work (everything you do with your raw data) explicitly described, totally transparent and completely reproducible. However, learning to code can be a daunting prospect for many biologists! That’s where an Reproducibility with R comes in!\nR is a free and open source language especially well-suited to data analysis and visualisation and has a relatively inclusive and newbie-friendly community. R caters to users who do not see themselves as programmers, but then allows them to slide gradually into programming.\nThis workshop will introduce you to R and RStudio, the most widely used interface for working with R. You will learn how to import data, manipulate it, summarise it and plot it. You will learn how to use an organised project-oriented workflow with well-commented scripts so that you can understand your work in the future and share it with others. In addition, you will learn what a working directory and a file path are - these are key concepts in computing generally but ones which are often not taught to biologists.\n\n\n\nIt is impossible to cover everything to you might ever need! Different people will use different methods and tools. Topics have been chosen because they are: foundational, widely applicable and transferable conceptually.\n\n\n\nAfter this workshop the successful learner will be able to:\n\nFind their way around the RStudio windows\nCreate and plot data using ggplot\nExplain the rationale for scripting analysis\nKnow how to load packages\nUnderstand what is meant by the working directory, absolute and relative paths and be able to apply these concepts to data import\nSummarise data in a single group or in multiple groups\nDevelop highly organised analyses including well-commented scripts that can be understood by future you and others"
  },
  {
    "objectID": "index.html#overview",
    "href": "index.html#overview",
    "title": "White Rose Analytics 1",
    "section": "",
    "text": "An increase in the complexity, and scale, of biological data means biologists are increasingly required to develop the data skills needed to design reproducible workflows for the simulation, collection, organisation, processing, analysis and presentation of data. Developing such data skills requires at least some coding, also known as scripting. This makes your work (everything you do with your raw data) explicitly described, totally transparent and completely reproducible. However, learning to code can be a daunting prospect for many biologists! That’s where an Reproducibility with R comes in!\nR is a free and open source language especially well-suited to data analysis and visualisation and has a relatively inclusive and newbie-friendly community. R caters to users who do not see themselves as programmers, but then allows them to slide gradually into programming.\nThis workshop will introduce you to R and RStudio, the most widely used interface for working with R. You will learn how to import data, manipulate it, summarise it and plot it. You will learn how to use an organised project-oriented workflow with well-commented scripts so that you can understand your work in the future and share it with others. In addition, you will learn what a working directory and a file path are - these are key concepts in computing generally but ones which are often not taught to biologists."
  },
  {
    "objectID": "index.html#philosophy-and-approach",
    "href": "index.html#philosophy-and-approach",
    "title": "White Rose Analytics 1",
    "section": "",
    "text": "It is impossible to cover everything to you might ever need! Different people will use different methods and tools. Topics have been chosen because they are: foundational, widely applicable and transferable conceptually."
  },
  {
    "objectID": "index.html#learning-outcomes",
    "href": "index.html#learning-outcomes",
    "title": "White Rose Analytics 1",
    "section": "",
    "text": "After this workshop the successful learner will be able to:\n\nFind their way around the RStudio windows\nCreate and plot data using ggplot\nExplain the rationale for scripting analysis\nKnow how to load packages\nUnderstand what is meant by the working directory, absolute and relative paths and be able to apply these concepts to data import\nSummarise data in a single group or in multiple groups\nDevelop highly organised analyses including well-commented scripts that can be understood by future you and others"
  },
  {
    "objectID": "materials/introduction-to-r-and-rstudio.html",
    "href": "materials/introduction-to-r-and-rstudio.html",
    "title": "Introduction to R and RStudio",
    "section": "",
    "text": "Finding your way round RStudio\nTyping in data and plotting it\nImporting data: working directories and paths\n\n\n\n\nthe panels\n\nTop left: Script - write and edit code and comments to keep\nBottom left: Console - where commands get executed and can be typed\nTop right: Environment - where you can see the objects you have created; History - of commands\nBottom right: Files - a file explorer; Plots; Packages; Help\n\n\n\nmaking yourself comfortable\ntyping in the console sending commands\nusing R as a calculator\nassigning values\nwhere to see objects\nusing a script - make sure to execute\ncomments #\ndata types and structures\nfunctions c()\n\ntypes of R files: .R, .RData .RHistory\n\n\nThere are several ways you can recap the demo at a later date:\n🖼️ Refer to this infographic Larger format \n📖 Read First Steps in RStudio\n📹 Watch\n\n\n\n🎬 We code together\n🛝 You try!\n\nWe will work with some data on the coat colour of 62 cats. You are going to type data in R, summarise and plot it\nThe data are as a frequency table:\n\n\n\nFrequency of coat colours in 62 cats\n\nCoat colour\nNo. cats\n\n\n\nblack\n23\n\n\nwhite\n15\n\n\ntabby\n8\n\n\nginger\n10\n\n\ntortoiseshell\n5\n\n\ncalico\n1\n\n\n\n\n\nYou will create a figure like this:\n\n\n\n\n\n\n\n\n\n\n🎬 In RStudio do File | New project | New directory Be purposeful about where you create it and name it. I suggest cats-1\n🎬 Make a new script and save it as type-data-and-plot.R to carry out the rest of the work.\n\nStart by making a vector called coat that holds coat colours\n🎬 Write the following in your script:\n\n# coat colours\ncoat &lt;- c(\"black\", \"white\", \"tabby\", \"ginger\", \"tortoiseshell\", \"calico\")\n\nThe shortcut for &lt;- is Alt+- (hold the Alt key down then hit the minus key ).\nEnsure your cursor is on the line with the command and do Control+Enter to send the command to the console to be executed.\nI have used a comment. Comment your code as much as possible!\n🛝 Create a vector called freq containing the numbers of cats with each coat colour\n\nAnswer - don’t look until you have tried!# numbers of cats with each coat colour\nfreq &lt;- c(23, 15, 8, 10, 5, 1)\n\n\n\nCommands like c() and sum() are in packages which are part the ‘base’ R system. A package is a collection of related commands. Base packages are installed automatically when you install R.\nOther packages, such as ggplot2 (Wickham 2016) need to be installed once, and then loaded each session. ggplot2 is one of the tidyverse (Wickham et al. 2019) packages.\n🎬 Load the tidyverse:\n\nlibrary(tidyverse)\n\nYou will likely be warned of some function name conflicts but these will not be a problem for you.\n\n\n\nggplot() takes a dataframe for an argument\nWe can make a dataframe of the two vectors, coat and freq using the data.frame() function.\n\n🎬 Make a dataframe called coat_data\n\ncoat_data &lt;- data.frame(coat, freq)\n\n🎬 Click on coat_data in the Environment to open a spreadsheet-like view of it.\n🎬 Create a simple barplot using ggplot like this:\n\nggplot(data = coat_data, aes(x = coat, y = freq)) +\n  geom_col()\n\n\n\n\n\n\n\n\n\nggplot() alone creates a blank plot.\n\nggplot(data = coat_data) looks the same.\n\naes() gives the ‘Aesthetic mappings’. How variables (columns) are mapped to visual properties (aesthetics) e.g., axes, colour, shapes.\nThus ggplot(data = coat_data, aes(x = coat, y = freq)) produces a plot with axes\n\ngeom_col: A ‘Geom’ (Geometric object) gives the visual representations of the data: points, lines, bars, boxplots etc.\n\nNote that ggplot2 is the name of the package and ggplot() is its most important command.\n\nThe manual tells us about a function. ‘Arguments’ can be added to the geom_col() command inside the brackets.\nCommands do something and their arguments (in brackets) and can specify:\n\nwhat object to do it to\nhow exactly to do it\n\nMany arguments have defaults so you don’t always need to supply them.\n🎬 Open the manual page for geom_col() using:\n\n?geom_col\n\nThe manual page has several sections.\n\n\nDescription an overview of what the command does\n\nUsage lists arguments\n\nform: argument name = default value\nsome arguments MUST be supplied others have defaults\n\n... means etc and includes arguments that can be passed to many ‘geoms’\n\n\n\nArguments gives the detail about the arguments\n\nDetails describes how the command works in more detail\n\nValue gives the output of the command\nDon’t be too perturbed by not fully understanding the information\n\n\n🎬 Change the fill of the bars using fill:\n\nggplot(data = coat_data, aes(x = coat, y = freq)) +\n  geom_col(fill = \"lightblue\")\n\n\n\n\n\n\n\nColours can be given by their name, “lightblue” or code, “#ADD8E6”.\nLook up by name or code\n🎬 Change the bars to a colour you like.\nfill is one of the arguments covered by .... fill is an ‘aesthetic’. If you look for ... in the list of arguments you will see it says:\n\nOther arguments passed on to layer(). These are often aesthetics, used to set an aesthetic to a fixed value, like colour = “red” or size = 3. They may also be parameters to the paired geom/stat.\n\nWe just set the fill aesthetic to a fixed value.\nFurther down the manual, there is a section on Aesthetics which lists those understood by geom_col()\nWe can set (map) the fill aesthetic to a fixed colour inside geom_col() or map it to a variable from the dataframe inside the aes() instead. This means the colour will be different for different values in that variable.\n🎬 Map the fill aesthetic to the coat variable:\n\nggplot(data = coat_data, aes(x = coat, y = freq, fill = coat)) +\n  geom_col()\n\n\n\n\n\n\n\nNote that we have taken fill = \"lightblue\" out of the geom_col() and instead put fill = coat in the aes().\n🛝 Use the manual to put the bars next to each other. Look for the argument that will mean there is no space between the bars.\n\nAnswer - don’t look until you have tried!ggplot(data = coat_data, aes(x = coat, y = freq)) +\n  geom_col(fill = \"lightblue\", width = 1)\n\n\n\n\n\n\n\n🛝 Use the manual to change the colour of the lines around each bar to black.\n\nAnswer - don’t look until you have tried!ggplot(data = coat_data,\n       aes(x = coat, y = freq)) +\n  geom_col(fill = \"lightblue\", \n           width = 1, \n           colour = \"black\")\n\n\n\n\n\n\n\n\nWe can make changes to the axes using:\n\nChanges to a discrete x axis: scale_x_discrete()\n\nChanges to a continuous y axis: scale_y_continuous()\n\n\nggplot automatically extends the axes slightly. You can turn this behaviour off with the expand argument in scale_x_discrete() and scale_y_continuous().1\n🎬 To remove the gap between the axes and the data:\n\nggplot(data = coat_data, aes(x = coat, y = freq)) +\n  geom_col(fill = \"lightblue\", \n           width = 1, \n           colour = \"black\") +\n  scale_x_discrete(expand = c(0, 0)) + \n  scale_y_continuous(expand = c(0, 0)) \n\n\n\n\n\n\n\nEach ‘layer’ is added to the ggplot() command with a +\n\n\n\n\n\n\nTop Tip\n\n\n\nMake your code easier to read by using white space and new lines\n\nput spaces around = , -&gt; and after ,\n\nuse a newline after every comma in a command with lots of arguments\n\n\n\n🛝 Look up scale_x_discrete in the manual and work out how to change the axis title from “coat” to “Coat colour”. Also change the y-axis title.\n\nAnswer - don’t look until you have tried!ggplot(data = coat_data, aes(x = coat, y = freq)) +\n  geom_col(fill = \"lightblue\", \n           width = 1, \n           colour = \"black\") +\n  scale_x_discrete(expand = c(0, 0),\n                   name = \"Coat colour\") + \n  scale_y_continuous(expand = c(0, 0),\n                     name = \"Number of cats\") \n\n\n\n\n\n\n\n🎬 I would prefer to see the y-axis extend a little beyond the data and we can change the axis “limits” in the scale_y_continuous()\n\nggplot(data = coat_data, aes(x = coat, y = freq)) +\n  geom_col(fill = \"lightblue\", \n           width = 1, \n           colour = \"black\") +\n  scale_x_discrete(expand = c(0, 0),\n                   name = \"Coat colour\") + \n  scale_y_continuous(expand = c(0, 0),\n                     name = \"Number of cats\",\n                     limits = c(0, 25)) \n\n\n\n\n\n\n\n\nThe grey grid background is useful for examining plots on a screen but for a report or publication you will want a more scientific style. Every aspect of the “theme” of a plot - the non-data elements such as fonts, background colours, axis line colours etc - can be controlled individually2 but there are some handy built in themes that apply several changes at once. One of these is theme_classic()\n🎬 Add theme_classic() to the plot:\n\nggplot(data = coat_data, aes(x = coat, y = freq)) +\n  geom_col(width = 1, \n           colour = \"black\",\n           fill = \"lightblue\") +\n  scale_x_discrete(expand = c(0, 0),\n                   name = \"Coat colour\") + \n  scale_y_continuous(expand = c(0, 0),\n                     name = \"Number of cats\",\n                     limits = c(0, 25)) +\n  theme_classic()\n\n\n\n\n\n\n\n\nTyping in data is not practical when you have a lot of it. Far more commonly, we import data from a file into R. This requires you know two pieces of information.\n\n\nWhat format the data are in\nThe format of the data determines what function you will use to import. The file extension often indicates format.\n\n\n.txt a plain text file3, where the columns are often separated by a space but might also be separated by a tab, a backslash or forward slash, or some other character\n\n.csv a plain text file where the columns are separated by commas\n\n.xlsx an Excel file\n\n\n\nWhere the file is relative to your working directory\nR can only read in a file if you say where it is, i.e., you give its relative path.\n\n\nWe will first save our file for this workshop to our Project folder and read them in. Then we will then create a new folder inside our Project folder called data-raw, move the data file into it and read them in from there. This will allow you to see how the file paths need to be modified when a file is not in your working directory.\n\n\n\n\n\n\n\n\n\n\n\n🎬 In RStudio do File | New project | New directory Be purposeful about where you create it and name it. I suggest cats-2\n🎬 Make a new script and save it as import-data-and-summarise-plot.R.\n🎬 Save this file to your cats-2 folder: The coat colour and mass of 62 cats - cat-coats.csv\n\nCSV files can be read read in with core tidyverse (Wickham et al. 2019) functions.\n🎬 Load the packages\n\nlibrary(tidyverse)\n\nA .csv. extension suggests this is plain text file with comma separated columns. However, before we attempt to read it it, we should take a look at it. We can do this from RStudio\n🎬 Go to the Files pane (bottom right), click on the cat-coats.csv file and choose View File4\n🎬 Read in the csv file with:\n\ncats &lt;- read_csv(\"cat-coats.csv\")\n\nThe data from the file will be read into a dataframe called cats and you will be able to see it in the Environment.\n\nTo help you understand relative file paths, we will now move the data file.\n🎬 First remove the dataframes you just created to make it easier to see whether you can successfully read in the files from a different place:\n\nrm(cats)\n\n🎬 Now make a new folder called data-raw. You can do this on the Files Pane by clicking New Folder and typing into the box that appears.\n🎬 Check the boxes next to the file names and choose More | Move… and select the data-raw folder.\nThe file will move. To import data from a file in the data-raw folder, you need to give the relative path to the file from the working directory. The working directory is the Project folder, cats-2 so the relative path is data-raw/cat-coats.csv\n🎬 Import the cat-coats.csv data like this:\n\ncats &lt;- read_csv(\"data-raw/cat-coats.csv\")\n\n\nThe most appropriate way to summarise nominal data like the colour of cat coats is to tabulate the number of cats with each colour.\n🎬 Summarise the cats dataframe by counting the number of cats in each category\n\ncats |&gt; \n  group_by(coat) |&gt; \n  count()\n\n# A tibble: 6 × 2\n# Groups:   coat [6]\n  coat              n\n  &lt;chr&gt;         &lt;int&gt;\n1 black            23\n2 calico            1\n3 ginger           10\n4 tabby             8\n5 tortoiseshell     5\n6 white            15\n\n\n|&gt; is the pipe and can be produced with Ctrl+Shift+M\nThis sort of data might be represented with a barchart. You have two options for producing that barchart:\n\nplot the summary table using geom_col()\nplot the raw data using geom_bar()\n\nWe did the first of these earlier. The geom_col() function uses the numbers in a second column to determine how high the bars are. However, the geom_bar() function will do the tabulating for you.\n🎬 Plot the coat data using geom_bar:\n\nggplot(cats, aes(x = coat)) +\n  geom_bar()\n\n\n\n\n\n\n\nThe gaps that R put automatically between the bars reflects that the coat colours are discrete categories.\n\n\nThe variable mass in the cats dataframe is continuous. Very many continuous variables have a normal distribution. The normal distribution is also known as the bell-shaped curve. If we had the mass of all the cats in the world, we would find many cats were near the mean and fewer would be away from the mean, either much lighter or much heavier. In fact 68% would be within one standard deviation of the mean and about 96% would be within two standard deviations.\n\n\n\n\n\n\n\n\n🎬 We can find the mean mass with:\n\ncats |&gt; \n  summarise(mean = mean(mass))\n\n# A tibble: 1 × 1\n   mean\n  &lt;dbl&gt;\n1  4.51\n\n\nWe can add any sort of summary by placing it inside the the summarise parentheses. Each one is separated by a comma. We did this to find the median and the interquatrile range for fly bristles.\n🎬 For example, another way to calculate the number of values is to use the length() function:\n\ncats |&gt; \n  summarise(mean = mean(mass),\n            n = length(mass))\n\n# A tibble: 1 × 2\n   mean     n\n  &lt;dbl&gt; &lt;int&gt;\n1  4.51    62\n\n\n🛝 Adapt the code to calculate the mean, the sample size and the standard deviation (sd())\n\nAnswer - don’t look until you have tried!cats |&gt; \n  summarise(mean = mean(mass),\n            n = length(mass),\n            standard_dev = sd(mass))\n\n# A tibble: 1 × 3\n   mean     n standard_dev\n  &lt;dbl&gt; &lt;int&gt;        &lt;dbl&gt;\n1  4.51    62         1.20\n\n\nA single continuous variable can be plotted using a histogram to show the shape of the distribution.\n🎬 Plot a histogram of cats mass:\n\nggplot(cats, aes(x = mass)) +\n  geom_histogram(bins = 15, colour = \"black\") \n\n\n\n\n\n\n\nNotice that there are no gaps between the bars which reflects that mass is continuous. bins determines how many groups the variable is divided up into (i.e., the number of bars) and colour sets the colour for the outline of the bars. A sample of 62 is a relatively small number of values for plotting a distribution and the number of bins used determines how smooth or normally distributed the values look.\nwe will find summary statistics about mass for each of the coat types.\n🎬 The group_by() function is used before the summarise() to do calculations for each of the coats:\n\ncats |&gt; \n  group_by(coat) |&gt; \n  summarise(mean = mean(mass),\n                  standard_dev = sd(mass))\n\n# A tibble: 6 × 3\n  coat           mean standard_dev\n  &lt;chr&gt;         &lt;dbl&gt;        &lt;dbl&gt;\n1 black          4.63        1.33 \n2 calico         2.19       NA    \n3 ginger         4.46        1.12 \n4 tabby          4.86        0.444\n5 tortoiseshell  4.50        0.929\n6 white          4.34        1.34 \n\n\nYou can read this as:\n\ntake cats and then group by coat and then summarise by finding the mean of mass and the standard deviation of mass\n\n🛝 Why do we get an NA for the standard deviation of the calico cats?\nPages made with R (R Core Team 2025), Quarto (Allaire et al. 2024), knitr (Xie 2024, 2015, 2014), kableExtra (Zhu 2024)"
  },
  {
    "objectID": "materials/introduction-to-r-and-rstudio.html#finding-your-way-round-rstudio",
    "href": "materials/introduction-to-r-and-rstudio.html#finding-your-way-round-rstudio",
    "title": "Introduction to R and RStudio",
    "section": "",
    "text": "the panels\n\nTop left: Script - write and edit code and comments to keep\nBottom left: Console - where commands get executed and can be typed\nTop right: Environment - where you can see the objects you have created; History - of commands\nBottom right: Files - a file explorer; Plots; Packages; Help\n\n\n\nmaking yourself comfortable\ntyping in the console sending commands\nusing R as a calculator\nassigning values\nwhere to see objects\nusing a script - make sure to execute\ncomments #\ndata types and structures\nfunctions c()\n\ntypes of R files: .R, .RData .RHistory\n\n\nThere are several ways you can recap the demo at a later date:\n🖼️ Refer to this infographic Larger format \n📖 Read First Steps in RStudio\n📹 Watch"
  },
  {
    "objectID": "materials/introduction-to-r-and-rstudio.html#typing-in-data-and-plotting-it",
    "href": "materials/introduction-to-r-and-rstudio.html#typing-in-data-and-plotting-it",
    "title": "Introduction to R and RStudio",
    "section": "",
    "text": "🎬 We code together\n🛝 You try!\n\nWe will work with some data on the coat colour of 62 cats. You are going to type data in R, summarise and plot it\nThe data are as a frequency table:\n\n\n\nFrequency of coat colours in 62 cats\n\nCoat colour\nNo. cats\n\n\n\nblack\n23\n\n\nwhite\n15\n\n\ntabby\n8\n\n\nginger\n10\n\n\ntortoiseshell\n5\n\n\ncalico\n1\n\n\n\n\n\nYou will create a figure like this:\n\n\n\n\n\n\n\n\n\n\n🎬 In RStudio do File | New project | New directory Be purposeful about where you create it and name it. I suggest cats-1\n🎬 Make a new script and save it as type-data-and-plot.R to carry out the rest of the work.\n\nStart by making a vector called coat that holds coat colours\n🎬 Write the following in your script:\n\n# coat colours\ncoat &lt;- c(\"black\", \"white\", \"tabby\", \"ginger\", \"tortoiseshell\", \"calico\")\n\nThe shortcut for &lt;- is Alt+- (hold the Alt key down then hit the minus key ).\nEnsure your cursor is on the line with the command and do Control+Enter to send the command to the console to be executed.\nI have used a comment. Comment your code as much as possible!\n🛝 Create a vector called freq containing the numbers of cats with each coat colour\n\nAnswer - don’t look until you have tried!# numbers of cats with each coat colour\nfreq &lt;- c(23, 15, 8, 10, 5, 1)\n\n\n\nCommands like c() and sum() are in packages which are part the ‘base’ R system. A package is a collection of related commands. Base packages are installed automatically when you install R.\nOther packages, such as ggplot2 (Wickham 2016) need to be installed once, and then loaded each session. ggplot2 is one of the tidyverse (Wickham et al. 2019) packages.\n🎬 Load the tidyverse:\n\nlibrary(tidyverse)\n\nYou will likely be warned of some function name conflicts but these will not be a problem for you.\n\n\n\nggplot() takes a dataframe for an argument\nWe can make a dataframe of the two vectors, coat and freq using the data.frame() function.\n\n🎬 Make a dataframe called coat_data\n\ncoat_data &lt;- data.frame(coat, freq)\n\n🎬 Click on coat_data in the Environment to open a spreadsheet-like view of it.\n🎬 Create a simple barplot using ggplot like this:\n\nggplot(data = coat_data, aes(x = coat, y = freq)) +\n  geom_col()\n\n\n\n\n\n\n\n\n\nggplot() alone creates a blank plot.\n\nggplot(data = coat_data) looks the same.\n\naes() gives the ‘Aesthetic mappings’. How variables (columns) are mapped to visual properties (aesthetics) e.g., axes, colour, shapes.\nThus ggplot(data = coat_data, aes(x = coat, y = freq)) produces a plot with axes\n\ngeom_col: A ‘Geom’ (Geometric object) gives the visual representations of the data: points, lines, bars, boxplots etc.\n\nNote that ggplot2 is the name of the package and ggplot() is its most important command.\n\nThe manual tells us about a function. ‘Arguments’ can be added to the geom_col() command inside the brackets.\nCommands do something and their arguments (in brackets) and can specify:\n\nwhat object to do it to\nhow exactly to do it\n\nMany arguments have defaults so you don’t always need to supply them.\n🎬 Open the manual page for geom_col() using:\n\n?geom_col\n\nThe manual page has several sections.\n\n\nDescription an overview of what the command does\n\nUsage lists arguments\n\nform: argument name = default value\nsome arguments MUST be supplied others have defaults\n\n... means etc and includes arguments that can be passed to many ‘geoms’\n\n\n\nArguments gives the detail about the arguments\n\nDetails describes how the command works in more detail\n\nValue gives the output of the command\nDon’t be too perturbed by not fully understanding the information"
  },
  {
    "objectID": "materials/introduction-to-r-and-rstudio.html#customising-a-plot",
    "href": "materials/introduction-to-r-and-rstudio.html#customising-a-plot",
    "title": "Introduction to R and RStudio",
    "section": "",
    "text": "🎬 Change the fill of the bars using fill:\n\nggplot(data = coat_data, aes(x = coat, y = freq)) +\n  geom_col(fill = \"lightblue\")\n\n\n\n\n\n\n\nColours can be given by their name, “lightblue” or code, “#ADD8E6”.\nLook up by name or code\n🎬 Change the bars to a colour you like.\nfill is one of the arguments covered by .... fill is an ‘aesthetic’. If you look for ... in the list of arguments you will see it says:\n\nOther arguments passed on to layer(). These are often aesthetics, used to set an aesthetic to a fixed value, like colour = “red” or size = 3. They may also be parameters to the paired geom/stat.\n\nWe just set the fill aesthetic to a fixed value.\nFurther down the manual, there is a section on Aesthetics which lists those understood by geom_col()\nWe can set (map) the fill aesthetic to a fixed colour inside geom_col() or map it to a variable from the dataframe inside the aes() instead. This means the colour will be different for different values in that variable.\n🎬 Map the fill aesthetic to the coat variable:\n\nggplot(data = coat_data, aes(x = coat, y = freq, fill = coat)) +\n  geom_col()\n\n\n\n\n\n\n\nNote that we have taken fill = \"lightblue\" out of the geom_col() and instead put fill = coat in the aes().\n🛝 Use the manual to put the bars next to each other. Look for the argument that will mean there is no space between the bars.\n\nAnswer - don’t look until you have tried!ggplot(data = coat_data, aes(x = coat, y = freq)) +\n  geom_col(fill = \"lightblue\", width = 1)\n\n\n\n\n\n\n\n🛝 Use the manual to change the colour of the lines around each bar to black.\n\nAnswer - don’t look until you have tried!ggplot(data = coat_data,\n       aes(x = coat, y = freq)) +\n  geom_col(fill = \"lightblue\", \n           width = 1, \n           colour = \"black\")\n\n\n\n\n\n\n\n\nWe can make changes to the axes using:\n\nChanges to a discrete x axis: scale_x_discrete()\n\nChanges to a continuous y axis: scale_y_continuous()\n\n\nggplot automatically extends the axes slightly. You can turn this behaviour off with the expand argument in scale_x_discrete() and scale_y_continuous().1\n🎬 To remove the gap between the axes and the data:\n\nggplot(data = coat_data, aes(x = coat, y = freq)) +\n  geom_col(fill = \"lightblue\", \n           width = 1, \n           colour = \"black\") +\n  scale_x_discrete(expand = c(0, 0)) + \n  scale_y_continuous(expand = c(0, 0)) \n\n\n\n\n\n\n\nEach ‘layer’ is added to the ggplot() command with a +\n\n\n\n\n\n\nTop Tip\n\n\n\nMake your code easier to read by using white space and new lines\n\nput spaces around = , -&gt; and after ,\n\nuse a newline after every comma in a command with lots of arguments\n\n\n\n🛝 Look up scale_x_discrete in the manual and work out how to change the axis title from “coat” to “Coat colour”. Also change the y-axis title.\n\nAnswer - don’t look until you have tried!ggplot(data = coat_data, aes(x = coat, y = freq)) +\n  geom_col(fill = \"lightblue\", \n           width = 1, \n           colour = \"black\") +\n  scale_x_discrete(expand = c(0, 0),\n                   name = \"Coat colour\") + \n  scale_y_continuous(expand = c(0, 0),\n                     name = \"Number of cats\") \n\n\n\n\n\n\n\n🎬 I would prefer to see the y-axis extend a little beyond the data and we can change the axis “limits” in the scale_y_continuous()\n\nggplot(data = coat_data, aes(x = coat, y = freq)) +\n  geom_col(fill = \"lightblue\", \n           width = 1, \n           colour = \"black\") +\n  scale_x_discrete(expand = c(0, 0),\n                   name = \"Coat colour\") + \n  scale_y_continuous(expand = c(0, 0),\n                     name = \"Number of cats\",\n                     limits = c(0, 25)) \n\n\n\n\n\n\n\n\nThe grey grid background is useful for examining plots on a screen but for a report or publication you will want a more scientific style. Every aspect of the “theme” of a plot - the non-data elements such as fonts, background colours, axis line colours etc - can be controlled individually2 but there are some handy built in themes that apply several changes at once. One of these is theme_classic()\n🎬 Add theme_classic() to the plot:\n\nggplot(data = coat_data, aes(x = coat, y = freq)) +\n  geom_col(width = 1, \n           colour = \"black\",\n           fill = \"lightblue\") +\n  scale_x_discrete(expand = c(0, 0),\n                   name = \"Coat colour\") + \n  scale_y_continuous(expand = c(0, 0),\n                     name = \"Number of cats\",\n                     limits = c(0, 25)) +\n  theme_classic()"
  },
  {
    "objectID": "materials/introduction-to-r-and-rstudio.html#importing-data-from-files",
    "href": "materials/introduction-to-r-and-rstudio.html#importing-data-from-files",
    "title": "Introduction to R and RStudio",
    "section": "",
    "text": "Typing in data is not practical when you have a lot of it. Far more commonly, we import data from a file into R. This requires you know two pieces of information.\n\n\nWhat format the data are in\nThe format of the data determines what function you will use to import. The file extension often indicates format.\n\n\n.txt a plain text file3, where the columns are often separated by a space but might also be separated by a tab, a backslash or forward slash, or some other character\n\n.csv a plain text file where the columns are separated by commas\n\n.xlsx an Excel file\n\n\n\nWhere the file is relative to your working directory\nR can only read in a file if you say where it is, i.e., you give its relative path.\n\n\nWe will first save our file for this workshop to our Project folder and read them in. Then we will then create a new folder inside our Project folder called data-raw, move the data file into it and read them in from there. This will allow you to see how the file paths need to be modified when a file is not in your working directory.\n\n\n\n\n\n\n\n\n\n\n\n🎬 In RStudio do File | New project | New directory Be purposeful about where you create it and name it. I suggest cats-2\n🎬 Make a new script and save it as import-data-and-summarise-plot.R.\n🎬 Save this file to your cats-2 folder: The coat colour and mass of 62 cats - cat-coats.csv\n\nCSV files can be read read in with core tidyverse (Wickham et al. 2019) functions.\n🎬 Load the packages\n\nlibrary(tidyverse)\n\nA .csv. extension suggests this is plain text file with comma separated columns. However, before we attempt to read it it, we should take a look at it. We can do this from RStudio\n🎬 Go to the Files pane (bottom right), click on the cat-coats.csv file and choose View File4\n🎬 Read in the csv file with:\n\ncats &lt;- read_csv(\"cat-coats.csv\")\n\nThe data from the file will be read into a dataframe called cats and you will be able to see it in the Environment.\n\nTo help you understand relative file paths, we will now move the data file.\n🎬 First remove the dataframes you just created to make it easier to see whether you can successfully read in the files from a different place:\n\nrm(cats)\n\n🎬 Now make a new folder called data-raw. You can do this on the Files Pane by clicking New Folder and typing into the box that appears.\n🎬 Check the boxes next to the file names and choose More | Move… and select the data-raw folder.\nThe file will move. To import data from a file in the data-raw folder, you need to give the relative path to the file from the working directory. The working directory is the Project folder, cats-2 so the relative path is data-raw/cat-coats.csv\n🎬 Import the cat-coats.csv data like this:\n\ncats &lt;- read_csv(\"data-raw/cat-coats.csv\")"
  },
  {
    "objectID": "materials/introduction-to-r-and-rstudio.html#summarising-discrete-data-cat-coat",
    "href": "materials/introduction-to-r-and-rstudio.html#summarising-discrete-data-cat-coat",
    "title": "Introduction to R and RStudio",
    "section": "",
    "text": "The most appropriate way to summarise nominal data like the colour of cat coats is to tabulate the number of cats with each colour.\n🎬 Summarise the cats dataframe by counting the number of cats in each category\n\ncats |&gt; \n  group_by(coat) |&gt; \n  count()\n\n# A tibble: 6 × 2\n# Groups:   coat [6]\n  coat              n\n  &lt;chr&gt;         &lt;int&gt;\n1 black            23\n2 calico            1\n3 ginger           10\n4 tabby             8\n5 tortoiseshell     5\n6 white            15\n\n\n|&gt; is the pipe and can be produced with Ctrl+Shift+M\nThis sort of data might be represented with a barchart. You have two options for producing that barchart:\n\nplot the summary table using geom_col()\nplot the raw data using geom_bar()\n\nWe did the first of these earlier. The geom_col() function uses the numbers in a second column to determine how high the bars are. However, the geom_bar() function will do the tabulating for you.\n🎬 Plot the coat data using geom_bar:\n\nggplot(cats, aes(x = coat)) +\n  geom_bar()\n\n\n\n\n\n\n\nThe gaps that R put automatically between the bars reflects that the coat colours are discrete categories."
  },
  {
    "objectID": "materials/introduction-to-r-and-rstudio.html#summarising-continuous-data",
    "href": "materials/introduction-to-r-and-rstudio.html#summarising-continuous-data",
    "title": "Introduction to R and RStudio",
    "section": "",
    "text": "The variable mass in the cats dataframe is continuous. Very many continuous variables have a normal distribution. The normal distribution is also known as the bell-shaped curve. If we had the mass of all the cats in the world, we would find many cats were near the mean and fewer would be away from the mean, either much lighter or much heavier. In fact 68% would be within one standard deviation of the mean and about 96% would be within two standard deviations.\n\n\n\n\n\n\n\n\n🎬 We can find the mean mass with:\n\ncats |&gt; \n  summarise(mean = mean(mass))\n\n# A tibble: 1 × 1\n   mean\n  &lt;dbl&gt;\n1  4.51\n\n\nWe can add any sort of summary by placing it inside the the summarise parentheses. Each one is separated by a comma. We did this to find the median and the interquatrile range for fly bristles.\n🎬 For example, another way to calculate the number of values is to use the length() function:\n\ncats |&gt; \n  summarise(mean = mean(mass),\n            n = length(mass))\n\n# A tibble: 1 × 2\n   mean     n\n  &lt;dbl&gt; &lt;int&gt;\n1  4.51    62\n\n\n🛝 Adapt the code to calculate the mean, the sample size and the standard deviation (sd())\n\nAnswer - don’t look until you have tried!cats |&gt; \n  summarise(mean = mean(mass),\n            n = length(mass),\n            standard_dev = sd(mass))\n\n# A tibble: 1 × 3\n   mean     n standard_dev\n  &lt;dbl&gt; &lt;int&gt;        &lt;dbl&gt;\n1  4.51    62         1.20\n\n\nA single continuous variable can be plotted using a histogram to show the shape of the distribution.\n🎬 Plot a histogram of cats mass:\n\nggplot(cats, aes(x = mass)) +\n  geom_histogram(bins = 15, colour = \"black\") \n\n\n\n\n\n\n\nNotice that there are no gaps between the bars which reflects that mass is continuous. bins determines how many groups the variable is divided up into (i.e., the number of bars) and colour sets the colour for the outline of the bars. A sample of 62 is a relatively small number of values for plotting a distribution and the number of bins used determines how smooth or normally distributed the values look.\nwe will find summary statistics about mass for each of the coat types.\n🎬 The group_by() function is used before the summarise() to do calculations for each of the coats:\n\ncats |&gt; \n  group_by(coat) |&gt; \n  summarise(mean = mean(mass),\n                  standard_dev = sd(mass))\n\n# A tibble: 6 × 3\n  coat           mean standard_dev\n  &lt;chr&gt;         &lt;dbl&gt;        &lt;dbl&gt;\n1 black          4.63        1.33 \n2 calico         2.19       NA    \n3 ginger         4.46        1.12 \n4 tabby          4.86        0.444\n5 tortoiseshell  4.50        0.929\n6 white          4.34        1.34 \n\n\nYou can read this as:\n\ntake cats and then group by coat and then summarise by finding the mean of mass and the standard deviation of mass\n\n🛝 Why do we get an NA for the standard deviation of the calico cats?\nPages made with R (R Core Team 2025), Quarto (Allaire et al. 2024), knitr (Xie 2024, 2015, 2014), kableExtra (Zhu 2024)"
  },
  {
    "objectID": "materials/introduction-to-r-and-rstudio.html#footnotes",
    "href": "materials/introduction-to-r-and-rstudio.html#footnotes",
    "title": "Introduction to R and RStudio",
    "section": "Footnotes",
    "text": "Footnotes\n\nThere are also scale_x_continous() and scale_y_discrete() functions when you have those types of variable↩︎\nModify components of a theme↩︎\nPlain text files can be opened in notepad or other similar editor and still be readable.↩︎\nDo not be tempted to import data this way. Unless you are careful, your data import will not be scripted or will not be scripted correctly.↩︎"
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "Introduction and Principles of reproducibility 20 mins\n\nIntroduction\nPrinciples of reproducibility\n\nIntroduction to R and RStudio 70 mins\n\nFinding your way round RStudio\nTyping in data and plotting it\nImporting data\nWorking directories and file paths"
  },
  {
    "objectID": "schedule.html#am-11am-session-1-90-mins",
    "href": "schedule.html#am-11am-session-1-90-mins",
    "title": "Schedule",
    "section": "",
    "text": "Introduction and Principles of reproducibility 20 mins\n\nIntroduction\nPrinciples of reproducibility\n\nIntroduction to R and RStudio 70 mins\n\nFinding your way round RStudio\nTyping in data and plotting it\nImporting data\nWorking directories and file paths"
  },
  {
    "objectID": "schedule.html#am-11.30am-break",
    "href": "schedule.html#am-11.30am-break",
    "title": "Schedule",
    "section": "11am – 11.30am: break",
    "text": "11am – 11.30am: break"
  },
  {
    "objectID": "schedule.html#am-12.15pm-session-2-45-mins",
    "href": "schedule.html#am-12.15pm-session-2-45-mins",
    "title": "Schedule",
    "section": "11.30am – 12.15pm: Session 2 45 mins",
    "text": "11.30am – 12.15pm: Session 2 45 mins\nData manipulation\n\nFiltering rows 1\nAdding columns\nSummarising\nWriting data to a file"
  },
  {
    "objectID": "schedule.html#pm-1pm-lunch",
    "href": "schedule.html#pm-1pm-lunch",
    "title": "Schedule",
    "section": "12.15pm – 1pm: lunch",
    "text": "12.15pm – 1pm: lunch"
  },
  {
    "objectID": "schedule.html#pm-2.30pm-session-3-90-mins",
    "href": "schedule.html#pm-2.30pm-session-3-90-mins",
    "title": "Schedule",
    "section": "1pm – 2.30pm: Session 3 90 mins",
    "text": "1pm – 2.30pm: Session 3 90 mins\nReproducible reports with Quarto 90 mins"
  },
  {
    "objectID": "modules/quarto/slide.html#aims",
    "href": "modules/quarto/slide.html#aims",
    "title": "Quarto for reproducible reporting",
    "section": "Aims",
    "text": "Aims\n\nTo introduce you to Quarto for creating reproducible reports in a variety of output formats.\nYou will also get more practice organising analyses and importing, summarising and plotting data.\n\n\n🎬 An instruction to do something"
  },
  {
    "objectID": "modules/quarto/slide.html#learning-outcomes",
    "href": "modules/quarto/slide.html#learning-outcomes",
    "title": "Quarto for reproducible reporting",
    "section": "Learning Outcomes",
    "text": "Learning Outcomes\nThe successful student will be able to:\n\n\nexplain what Quarto and markdown are\nappreciate the role of the YAML header\nset default code chunk behaviour and that for individual chunks\nuse headings, simple text formatting and special characters\nadd citations and references\nuse inline code to report results in text\ncreate automatically numbered tables and figures and cross reference them in text"
  },
  {
    "objectID": "modules/quarto/slide.html#current-process",
    "href": "modules/quarto/slide.html#current-process",
    "title": "Quarto for reproducible reporting",
    "section": "Current process",
    "text": "Current process\n\n\n\nWhat is your process for getting your summary data, statistical results, tables and figures in to a report / paper?\n90% of you use Word/Pages/Writer/Googledocs\n\nWhat do you do when you get additional data that increases your sample sizes?\nHow easy is it to reorder your figures and tables?\nWhat do you do if you formatted for one journal and now have to submit to another?"
  },
  {
    "objectID": "modules/quarto/slide.html#current-process-1",
    "href": "modules/quarto/slide.html#current-process-1",
    "title": "Quarto for reproducible reporting",
    "section": "Current process",
    "text": "Current process\n\n\nTypically people analyse, plot and write up in different programs.\nGraphs are saved to files and inserted into the final report.\nReordering figures, tables and equations means updating everywhere they are cross-referenced.\nIf the data change, the author must repeat the entire process to update the report.\nManual labour ….. error prone"
  },
  {
    "objectID": "modules/quarto/slide.html#what-is-quarto-1",
    "href": "modules/quarto/slide.html#what-is-quarto-1",
    "title": "Quarto for reproducible reporting",
    "section": "What is Quarto?",
    "text": "What is Quarto?\n\n\nAn open-source scientific and technical publishing system that allows you to create dynamic reproducible reports in a variety of output formats.\nNext generation RMarkdown. Many new features, greater standardisation and more flexibility.\nMutli-language Python, R, Julia, and Observable.\nInclude auto-numbered and cross-referencable equations, figures and tables\nIntegrates with Zotero"
  },
  {
    "objectID": "modules/quarto/slide.html#key-points-from-the-demo",
    "href": "modules/quarto/slide.html#key-points-from-the-demo",
    "title": "Quarto for reproducible reporting",
    "section": "Key points from the demo",
    "text": "Key points from the demo\n\nQuarto mixes text and code to create dynamic reports\nThe YAML header sets the default behaviour for the document and is between --- at the top of the document\nR Code chunks are between ```{r} and ``` and chunk options determine how/whether they run whether code/output is included in the rendered document\nYou can run code chunk interactively or through rendering\nComments: |#, # in chunk options, &lt;!-- in text --&gt; but use Ctrl+Shift+C"
  },
  {
    "objectID": "modules/quarto/slide.html#what-is-markdown",
    "href": "modules/quarto/slide.html#what-is-markdown",
    "title": "Quarto for reproducible reporting",
    "section": "What is Markdown?",
    "text": "What is Markdown?\nMarkdown is a plain text format that is designed to be easy to write, and, even more importantly, easy to read"
  },
  {
    "objectID": "modules/quarto/slide.html#text-formatting",
    "href": "modules/quarto/slide.html#text-formatting",
    "title": "Quarto for reproducible reporting",
    "section": "Text Formatting",
    "text": "Text Formatting\n\n\n\n\n\n\nMarkdown Syntax\nOutput\n\n\n\n*italics*,**bold**\n\nitalics, bold\n\n\n\n***bold italics **\nbold italics\n\n\nsuperscript^2^\nsuperscript2\n\n\n\nsubscript~2~\nsubscript2\n\n\n\n~~strikethrough~~\nstrikethrough\n\n\n`verbatim code`\nverbatim code"
  },
  {
    "objectID": "modules/quarto/slide.html#headings",
    "href": "modules/quarto/slide.html#headings",
    "title": "Quarto for reproducible reporting",
    "section": "Headings",
    "text": "Headings\n\n\n\n\n\n\nMarkdown Syntax\nOutput\n\n\n\n# Header 1\nHeader 1\n\n\n## Header 2\nHeader 2\n\n\n### Header 3\nHeader 3\n\n\n#### Header 4\nHeader 4"
  },
  {
    "objectID": "modules/quarto/slide.html#links-images",
    "href": "modules/quarto/slide.html#links-images",
    "title": "Quarto for reproducible reporting",
    "section": "Links & Images",
    "text": "Links & Images\n\n\nMarkdown Syntax\nOutput\n\n\n\n[\nQuarto](https://quarto.org)\nQuarto\n\n\n!\n[Caption](images/chaff.jpg)"
  },
  {
    "objectID": "modules/quarto/slide.html#lists",
    "href": "modules/quarto/slide.html#lists",
    "title": "Quarto for reproducible reporting",
    "section": "Lists",
    "text": "Lists\n\n\n\n\n\n\nMarkdown Syntax\nOutput\n\n\n* unordered list\n    + sub-item 1\n    + sub-item 2\n\nunordered list\n\nsub-item 1\nsub-item 2"
  },
  {
    "objectID": "modules/quarto/slide.html#lists-1",
    "href": "modules/quarto/slide.html#lists-1",
    "title": "Quarto for reproducible reporting",
    "section": "Lists",
    "text": "Lists\n\n\n\n\n\n\nMarkdown Syntax\nOutput\n\n\n1. ordered list\n2. item 2\n    i) sub-item 1\n\nordered list\nitem 2\n\nsub-item 1"
  },
  {
    "objectID": "modules/quarto/slide.html#equations",
    "href": "modules/quarto/slide.html#equations",
    "title": "Quarto for reproducible reporting",
    "section": "Equations",
    "text": "Equations\nUse $ delimiters for inline math and $$ delimiters for display math. For example:\n\n\n\n\n\n\nMarkdown Syntax\nOutput\n\n\n\ninline math: $E = mc^{2}$\ninline math: \\(E=mc^{2}\\)\n\n\n\ndisplay math:\n\n$$E = mc^{2}$$\n\ndisplay math:\n\\[E = mc^{2}\\]"
  },
  {
    "objectID": "modules/quarto/slide.html#divs",
    "href": "modules/quarto/slide.html#divs",
    "title": "Quarto for reproducible reporting",
    "section": "Divs",
    "text": "Divs\n“Divs” are used to group content together and apply styling to that content.\nFor example, callouts\n:::{.callout-note}\nNote that there are five types of callouts, including: \n`note`, `tip`, `warning`, `caution`, and `important`.\n:::\n\n\n\n\n\n\nNote\n\n\nNote that there are five types of callouts, including: note, tip, warning, caution, and important."
  },
  {
    "objectID": "modules/quarto/slide.html#div",
    "href": "modules/quarto/slide.html#div",
    "title": "Quarto for reproducible reporting",
    "section": "Div",
    "text": "Div\nFor example:\n::: {style=\"font-size: 80%\"}\nThis content is smaller\n:::\n\nThis content is smaller"
  },
  {
    "objectID": "modules/quarto/slide.html#start-a-new-project",
    "href": "modules/quarto/slide.html#start-a-new-project",
    "title": "Quarto for reproducible reporting",
    "section": "Start a new project",
    "text": "Start a new project\n🎬 File | New Project | New Directory | Quarto Project\n\nBrowse to an appropriate place and give your project a name.\nI used wr-chaff\nChoose Engine: Knitr\nTurn visual markdown editor off (for now)"
  },
  {
    "objectID": "modules/quarto/slide.html#start-a-new-project-1",
    "href": "modules/quarto/slide.html#start-a-new-project-1",
    "title": "Quarto for reproducible reporting",
    "section": "Start a new project",
    "text": "Start a new project\n🎬 Change some RStudio settings. Tools | Global Options\n\n\nGeneral:\n\nTurn off the three “Restore ….” options\nTurn “Save workspace to .RData on exit” to Never\n\n\n\nR Markdown:\n\nTurn “Show output preview in:” to to Viewer pane"
  },
  {
    "objectID": "modules/quarto/slide.html#your-project-contains",
    "href": "modules/quarto/slide.html#your-project-contains",
    "title": "Quarto for reproducible reporting",
    "section": "Your project contains",
    "text": "Your project contains\n\nwr-chaff.RProj - what makes the folder an RStudio project\n_quarto.yml - the configuration file\nwr-chaff.md - the main document containing some template text\n\n\n🎬 Hit Render (Ctrl-Shift-K)\nNote that wr-chaff.html is created and opened in the Viewer pane\n(may need to set in Global options to open in Viewer pane)"
  },
  {
    "objectID": "modules/quarto/slide.html#edit-the-yaml-header",
    "href": "modules/quarto/slide.html#edit-the-yaml-header",
    "title": "Quarto for reproducible reporting",
    "section": "Edit the YAML header",
    "text": "Edit the YAML header\n🎬 Add your name, and a title. Also add the engine and format\n---\ntitle: \"The difference in mass between subspecies of common chaffinch.\"\nauthor: \"Emma Rand\"\nengine: knitr\nformat:\n  html\n---"
  },
  {
    "objectID": "modules/quarto/slide.html#add-some-content",
    "href": "modules/quarto/slide.html#add-some-content",
    "title": "Quarto for reproducible reporting",
    "section": "Add some content",
    "text": "Add some content\n🎬 Add a code chunk (Ctrl-Shift-I) for a simple graph.\n\n```{r}\nhist(rnorm(100))\n```\n\n🎬 Hit Render (Ctrl-Shift-K)"
  },
  {
    "objectID": "modules/quarto/slide.html#edit-the-yaml-header-1",
    "href": "modules/quarto/slide.html#edit-the-yaml-header-1",
    "title": "Quarto for reproducible reporting",
    "section": "Edit the YAML header",
    "text": "Edit the YAML header\n🎬 Set some default code chunk options. I recommend these for reports\n---\ntitle: \"The difference in mass between subspecies of common chaffinch.\"\nauthor: \"Emma Rand\"\nengine: knitr\nformat:\n  html\nexecute:\n  echo: false\n  include: true\n  error: false\n  message: false\n  warning: false\n\n---\n🎬 Hit Render (Ctrl-Shift-K)"
  },
  {
    "objectID": "modules/quarto/slide.html#code-chunk-options",
    "href": "modules/quarto/slide.html#code-chunk-options",
    "title": "Quarto for reproducible reporting",
    "section": "Code chunk options",
    "text": "Code chunk options\n\n\necho: false code will not be included in output\n\ninclude: true output will be included\n\nerror: false halt render if a code error occurs\n\nmessage: false messages and warnings will not be included\nwarning: false\n\n🎬 Experiment with change the options and re-rendering. Try misspelling rnorm to see the error option in action."
  },
  {
    "objectID": "modules/quarto/slide.html#content-1",
    "href": "modules/quarto/slide.html#content-1",
    "title": "Quarto for reproducible reporting",
    "section": "Content",
    "text": "Content\n🎬 Delete everything except the YAML header.\n🎬 Add headings for: Introduction, Methods, Results, Discussion, and References\n🎬 Add a code chunk for package loading\n\n```{r}\n#| label: load-packages\nlibrary(tidyverse)\n```\n\n\n#| label: load-packages is a code chunk label. These are useful (here) and essential (later) for cross-referencing."
  },
  {
    "objectID": "modules/quarto/slide.html#introduction",
    "href": "modules/quarto/slide.html#introduction",
    "title": "Quarto for reproducible reporting",
    "section": "Introduction",
    "text": "Introduction\n🎬 Add this test to the Introduction\n\n\nA number of subspecies of the common chaffinch, Fringilla coelebs, have been described based principally on the differences in the pattern and colour of the adult male plumage. Two of groups of these subspecies are the “coelebs group” that occurs in Europe and Asia and the “canariensis group” that occurs on the Canary Islands.\n\n\n\n🎬 Make the species name italic\n\n\n🎬 Make “common chaffinch” a link to https://en.wikipedia.org/wiki/Common_chaffinch"
  },
  {
    "objectID": "modules/quarto/slide.html#add-data-import",
    "href": "modules/quarto/slide.html#add-data-import",
    "title": "Quarto for reproducible reporting",
    "section": "Add data import",
    "text": "Add data import\n🎬 Make a folder called data-raw\n\n🎬 Save chaff.txt to data-raw\n\n\n🎬 Add a code chunk with:\n\n```{r}\n#| label: import-data\nfile &lt;- \"data-raw/chaff.txt\"\nchaff &lt;- read_table(file)\n```\n\n\n\n🎬 Run chunks interactively\n\n\n🎬 Render"
  },
  {
    "objectID": "modules/quarto/slide.html#add-data-summary",
    "href": "modules/quarto/slide.html#add-data-summary",
    "title": "Quarto for reproducible reporting",
    "section": "Add data summary",
    "text": "Add data summary\n🎬 Add a code chunk with:\n\n```{r}\n#| label: data-summary\nchaff_summary &lt;- chaff |&gt; \n  group_by(subspecies) |&gt;  \n  summarise(mean = mean(mass, na.rm = TRUE),\n            sd = sd(mass, na.rm = TRUE),\n            n = length(mass),\n            se = sd / sqrt(n))\n```\n\n\n🎬 Render\nNotice the chunk labels being used in “Background Jobs”"
  },
  {
    "objectID": "modules/quarto/slide.html#add-information-for-methods",
    "href": "modules/quarto/slide.html#add-information-for-methods",
    "title": "Quarto for reproducible reporting",
    "section": "Add information for methods",
    "text": "Add information for methods\n🎬 Add this text to the Introduction\n\n\nWe randomly sampled 20 F. c. coelebs males and 20 F. c. palmae males and determined their mass with spring scales. Analysis was carried out with R and tidyverse packages.\n\n\n\nIt would be good not to have “hard coded” those numbers in the text. What if we get more data. Or we just misremember or mis-type the numbers?"
  },
  {
    "objectID": "modules/quarto/slide.html#extract-summary-information",
    "href": "modules/quarto/slide.html#extract-summary-information",
    "title": "Quarto for reproducible reporting",
    "section": "Extract summary information",
    "text": "Extract summary information\n🎬 Add a code chunk with:\n\n```{r}\n#| label: extract-summary\n# extract values for inline reporting\n\n# sample sizes\nn_coelebs &lt;- chaff_summary |&gt; \n  filter(subspecies == \"coelebs\") |&gt; \n  pull(n)\n\nn_canariensis &lt;- chaff_summary |&gt; \n  filter(subspecies == \"canariensis\") |&gt; \n  pull(n)\n```"
  },
  {
    "objectID": "modules/quarto/slide.html#inline-code-reproducible-reporting",
    "href": "modules/quarto/slide.html#inline-code-reproducible-reporting",
    "title": "Quarto for reproducible reporting",
    "section": "Inline code: reproducible reporting",
    "text": "Inline code: reproducible reporting\n\nInline code is how you include a variable value, like a sample size, mean or statistical result, in a section of text.\nIn fact, any code output can be inserted directly into the text of a .qmd file using inline code.\n\n\nInline code goes between `r` and ` .\nFor example by writing:\nThe squareroot of 2 is `r sqrt(2) `\nyou will get:\nThe squareroot of 2 is 1.4142136"
  },
  {
    "objectID": "modules/quarto/slide.html#inline-code-reproducible-reporting-1",
    "href": "modules/quarto/slide.html#inline-code-reproducible-reporting-1",
    "title": "Quarto for reproducible reporting",
    "section": "Inline code: reproducible reporting",
    "text": "Inline code: reproducible reporting\n🎬 Replace the sample sizes in the Methods text with inline code\n🎬 Render"
  },
  {
    "objectID": "modules/quarto/slide.html#a-figure",
    "href": "modules/quarto/slide.html#a-figure",
    "title": "Quarto for reproducible reporting",
    "section": "A figure",
    "text": "A figure\n🎬 Add a code chunk to the Results section with:\n\n```{r}\n#| label: fig-chaff\nggplot() +\n  geom_point(data = chaff, aes(x = subspecies, y = mass),\n             position = position_jitter(width = 0.1, height = 0),\n             colour = \"gray50\") +\n  geom_errorbar(data = chaff_summary, \n                aes(x = subspecies, ymin = mean - se, ymax = mean + se),\n                width = 0.3) +\n  geom_errorbar(data = chaff_summary, \n                aes(x = subspecies, ymin = mean, ymax = mean),\n                width = 0.2) +\n  scale_y_continuous(name = \"Mass (g)\", \n                     limits = c(0, 30), \n                     expand = c(0, 0)) +\n  scale_x_discrete(name = \"Subspecies\", \n                   labels = c(\"Canariensis\", \"Coelebs\")) +\n  theme_classic()\n```\n\n\n🎬 Render\nNote: It is automatically labelled as Figure 1!"
  },
  {
    "objectID": "modules/quarto/slide.html#cross-referencing",
    "href": "modules/quarto/slide.html#cross-referencing",
    "title": "Quarto for reproducible reporting",
    "section": "Cross referencing",
    "text": "Cross referencing\nThe label of the code chunk is important when creating figures because it is used to cross reference the figure in the text. We give cross references with @ followed by the label of the code chunk.\n\nThat is starts with a fig- prefix also matters - this is what determines what is treated as a figure numbered in order of appearance.\n🎬 Add a sentence with a cross reference to the figure:\n\n\nCanariensis have higher mass than coelebs. See @fig-chaff"
  },
  {
    "objectID": "modules/quarto/slide.html#a-figure-legend",
    "href": "modules/quarto/slide.html#a-figure-legend",
    "title": "Quarto for reproducible reporting",
    "section": "A figure legend",
    "text": "A figure legend\nThere are two ways to add a legend:\n\nAdd the fig-cap chunk option: fig-cap: \"Mass of chaffinches\" to the code chunk.\nUse a div.\n\n\n\nIs much more flexible:\n\n\nYou can include inline code, citations, special characters and formatting\nYou can more easily make multipanel figures"
  },
  {
    "objectID": "modules/quarto/slide.html#a-figure-legend-with-a-div",
    "href": "modules/quarto/slide.html#a-figure-legend-with-a-div",
    "title": "Quarto for reproducible reporting",
    "section": "A figure legend with a div",
    "text": "A figure legend with a div\n🎬 Add a div by adding:\n\nremoving the fig-cap option and the label option\n::: before and after the code chunk\nplacing the label after the opening ::: like this: ::: {#fig-chaff} Note the # is important for numbering\nPutting the legend text between the code chunk and the closing :::\n\n\nIn the example figure legend I have included inline code, formatting and a special character using inline math."
  },
  {
    "objectID": "modules/quarto/slide.html#set-the-figure-size-and-alignment",
    "href": "modules/quarto/slide.html#set-the-figure-size-and-alignment",
    "title": "Quarto for reproducible reporting",
    "section": "Set the figure size and alignment",
    "text": "Set the figure size and alignment\n🎬 Add a chunk options fig-width, fig-height and fig-align to the code chunk:\n\n```{r}\n#| fig-width: 3.5\n#| fig-height: 3.5\nggplot() +\n  geom_point(data = chaff, aes(x = subspecies, y = mass),\n             position = position_jitter(width = 0.1, height = 0),\n             colour = \"gray50\") +\n  geom_errorbar(data = chaff_summary, \n                aes(x = subspecies, ymin = mean - se, ymax = mean + se),\n                width = 0.3) +\n  geom_errorbar(data = chaff_summary, \n                aes(x = subspecies, ymin = mean, ymax = mean),\n                width = 0.2) +\n  scale_y_continuous(name = \"Mass (g)\", \n                     limits = c(0, 30), \n                     expand = c(0, 0)) +\n  scale_x_discrete(name = \"Subspecies\", \n                   labels = c(\"Canariensis\", \"Coelebs\")) +\n  theme_classic()\n```"
  },
  {
    "objectID": "modules/quarto/slide.html#two-panel-figure",
    "href": "modules/quarto/slide.html#two-panel-figure",
    "title": "Quarto for reproducible reporting",
    "section": "Two panel figure",
    "text": "Two panel figure\n\n\nWe are going to add another figure, this time a figure with two panels (it’s an unnecessary figure for this data, but works for demonstration).\nThe figure will be two histogram of the mass of each subspecies.\nWe will again use a div which will contain two code chunks, one for each graph.\nTheir will be a label on the div for the figure as a whole and labels on each of the chunk to cross reference the sub figures.\nFigure layout information will be added to the div."
  },
  {
    "objectID": "modules/quarto/slide.html#two-panel-figure-1",
    "href": "modules/quarto/slide.html#two-panel-figure-1",
    "title": "Quarto for reproducible reporting",
    "section": "Two panel figure",
    "text": "Two panel figure\n🎬 Add these two chunks to the Results section below the last figure (make sure you’re outside the last div)\n\n```{r}\n#| label: fig-hist-canariensis\nchaff |&gt; filter(subspecies == \"canariensis\") |&gt;\n  ggplot(aes(x = mass)) +\n  geom_histogram(bins = 8) +\n  theme_minimal()\n```\n\n\n```{r}\n#| label: fig-hist-coelebs\nchaff |&gt; filter(subspecies == \"coelebs\") |&gt;\n  ggplot(aes(x = mass)) +\n  geom_histogram(bins = 8) +\n  theme_minimal()\n```\n\nIf you render, you’ll see that the two figures are added as separate figures."
  },
  {
    "objectID": "modules/quarto/slide.html#two-panel-figure-2",
    "href": "modules/quarto/slide.html#two-panel-figure-2",
    "title": "Quarto for reproducible reporting",
    "section": "Two panel figure",
    "text": "Two panel figure\nTo make them into one figure we need to use a div.\n🎬 Add the div a round those chunks\n::: {##fig-histograms layout-ncol=2}\n……\n:::\n\n🎬 Render\n\n\n🎬 Add a figure legend to the two panel figure\n\n\n🎬 Add a sentence with a cross reference to the figure. Can you cross reference the sub figures?\n\n\n🎬 Change the order of the figures"
  },
  {
    "objectID": "modules/quarto/slide.html#tables",
    "href": "modules/quarto/slide.html#tables",
    "title": "Quarto for reproducible reporting",
    "section": "Tables",
    "text": "Tables\nThere are several ways to add tables to a document. We will use the knitr::kable() function to create a table from a data frame or the summary information\n\n🎬 Add a table of the summary information for the chaffinch data:\n\n\nTable 1\n\n```{r}\n#| label: tbl-chaff\nchaff_summary |&gt; \n  knitr::kable(caption = \"Summary of mass(g) for the two subspecies of chaffinch.\")\n```"
  },
  {
    "objectID": "modules/quarto/slide.html#tables-1",
    "href": "modules/quarto/slide.html#tables-1",
    "title": "Quarto for reproducible reporting",
    "section": "Tables",
    "text": "Tables\nJust as the fig- prefix matters for corrected numbering of figures, the tbl- prefix is important for the corrected numbering of figures.\nJust as the label of the code chunk is important for cross referencing of figures so it is for tables and we use @ followed by the label of the code chunk to cross reference the table in the text.\n\n🎬 Add a sentence with a cross reference to the table."
  },
  {
    "objectID": "modules/quarto/slide.html#tables---improve-format",
    "href": "modules/quarto/slide.html#tables---improve-format",
    "title": "Quarto for reproducible reporting",
    "section": "Tables - improve format",
    "text": "Tables - improve format\nThe decimal places are over-the-top. They can be set\n\nin the table by adding digits = 2 to the kable() function\nFor the document overall by adding:\n\n\n```{r}\noptions(digits = 2)\n```\n\n🎬 Do one of these."
  },
  {
    "objectID": "modules/quarto/slide.html#tables---improve-format-1",
    "href": "modules/quarto/slide.html#tables---improve-format-1",
    "title": "Quarto for reproducible reporting",
    "section": "Tables - improve format",
    "text": "Tables - improve format\nA handy tidyverse function, str_to_sentence(), can be used for converting lower case to sentence case. We will do this for column names\n\n🎬 Add col.names = names(chaff_summary) |&gt; str_to_sentence() to the kable() function"
  },
  {
    "objectID": "modules/quarto/slide.html#the-visual-editor",
    "href": "modules/quarto/slide.html#the-visual-editor",
    "title": "Quarto for reproducible reporting",
    "section": "The visual editor!",
    "text": "The visual editor!\n\n\nThe visual editor is a WYSIWYG editor for Quarto documents. It can be accessed by clicking the Visual Editor button in the top right or by Ctrl-Shift-F4\nIt makes it easier to add and edit content (although I find I often want to use the source)\nIt is especially useful for adding citations.\nEspecially if you use zotero."
  },
  {
    "objectID": "modules/quarto/slide.html#citations",
    "href": "modules/quarto/slide.html#citations",
    "title": "Quarto for reproducible reporting",
    "section": "Citations",
    "text": "Citations\nYou can add citations for R and packages, from doi, from a .bib file, or from zotero.\n🎬 Put your cursor where you want the citation to go and click the Insert button in the top right and select Citation (Ctrl-Shift-F8) and add a citation for the tidverse package.\n\n🎬 Render\n\n\n\nthe in-text citation has been added\nthe reference has been added to the references section\na references.bib file has been created in the project folder"
  },
  {
    "objectID": "modules/quarto/slide.html#citations-1",
    "href": "modules/quarto/slide.html#citations-1",
    "title": "Quarto for reproducible reporting",
    "section": "Citations",
    "text": "Citations\n🎬 Put your cursor after “plumage” in the Introduction and click the Insert button in the top right and select Citation (Ctrl-Shift-F8). Select From DOI and paste in 10.1016/j.ympev.2009.07.018\n\n🎬 Render\n\n\nYou can also add citations to the .bib file manually. E.g. for R itself"
  },
  {
    "objectID": "modules/quarto/slide.html#extra-exercises",
    "href": "modules/quarto/slide.html#extra-exercises",
    "title": "Quarto for reproducible reporting",
    "section": "Extra exercises",
    "text": "Extra exercises\n🎬 Make a folder called images and save these two images of the subspecies to it: canariensis.jpg and coelebs.jpg. Then add images of each of the chaffinch subspecies to the multi-panel figure."
  },
  {
    "objectID": "modules/quarto/slide.html#summary",
    "href": "modules/quarto/slide.html#summary",
    "title": "Quarto for reproducible reporting",
    "section": "Summary",
    "text": "Summary\n\n\nQuarto is a Mutli-language scientific publishing system for creating dynamic reproducible reports in a many formats. It is based on R Markdown.\nThe YAML header provides metadata and sets the default behaviour for the document\nCode chunk options determine how/whether they run whether code/output is included in the rendered document\nCode can be run interactively\n“Divs” are used to group content together and apply styling to that content.\nFigures, images, tables and equations can be numbered automatically and cross referenced in text. The fig- and tbl- (etc) prefixes are important for this.\nYou can add citations and references."
  }
]